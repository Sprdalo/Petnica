Modeliranje softvera

Blackbox - kutija koja sadrzi nesto nepoznatog identiteta.
	U programiranju to je neka "funkcija" kod koje znao sta su parametri i return value,
	ali ne znamo samu implementaciju nje.

Modeliranje softvera:
	razumevanje sistema od strane drugih osoba
	lakse pronalazenje bagova
		i samim ti lakse debagovanje
	testiranje licnih i individualnih modula
	teznja da se testira deo po deo softvera a ne ceo odjednom

Ciljevi dizajniranja softvera
	odrzljivost 
	testabilnost
	sigurnost (ogranicavanje od upadanja nezeljenog korisnika u sistem)
	brzina
		brzina je inverz za odrzivljost
	upotrebljivost (koliko korisnik moze dobro da upotrebi nas softver)
		upotrebljivost je uglavnom inverz za sigurnost

Specifikacija
	definisanje sta sistem treba da radi
	definisanje ulaz/izlaz-a
	podela na delove/modeule
	interagovanje modula

Podela:
	backend:
		rukovanje grafom
		autentikacija i autorizacija
			autentikacija j epitanje da li ste to vi
			autorizacija se pita da li imate dozvolu za odredjenu operaciju
		spam filtering
		content
		poruke

	frontend:
		komunikacija sa backendom
		user expirience - animacija neke
		dizajn

	Nijedan modul ne zna kako drugi moduli rade, samo ih interesuju rezultati
	Stepen modularnosti moze da bude toliki, da moduli ne budu u istom jeziku

Validacija softvera
	unit testovi
		testira samo module
	funkcionalni testovi
		testira skup svih modula

	Koriscenjem unit testova se lakse nalazi greska, jer vrlo lako ogranicava
	velicinu i poziciju mesta greske

	Unit testovi
		test za svaki modul - test case
		Za svaki test case (tc) imamo razlicite scenarije
		Tc sadrzi i setup i teardown operacije koje se izvrsavaju pre svakog testa
		U pythonu postoji biblioteka: unittest

Testabilnost modula
	Osobina modula da ga je moguce testirati kao izolovanu celinu
	Modul ne treba da zavisi od drugih modula
	Ako koristimo neku bazu podataka ili neki online servis
	..tokom testiranja mozemo napraviti lazu instancu i proslediti modulu

	Sta testirati?
		bazne slucajeve
		granicne slucajeve
		Testirati f^-1(f(x)) == x
		po pronalasku baga treba napisati test za njega i tek onda ga resiti
		ako se setimo moguceg baga, treba napisati test za njega

Pokrivenost koda
	Procenat koda koji je testiran
		Koliko je funkcija je testirano?
		Koliko grana izvrsavanja je testirano?

Dobre prakse prilikom kodiranja
	nezavisnot modula!
	parametri funkcija deskriptivni
	promenljive deskriptivne
	imena funkcija opisuju radnju
	parametri funkcija ili primitivni ili apstraktne klase
	ne mesati previse nestandardnih biblioteka
		velika zavisnost programa nije dobra stvar
	dobro poznavanje biblioteka i alata!
		suvisno za opis
	koristiti biblioteke ako vec postoje!
		manje sanse za gresku (logicku, syntaksnu, vremensku, memorijsku ili koji vec drugi k)
	koristiti google, stackoverflow, github, google schoolar, ...

Biblioteka za CPP za testiranje postoji: boost(nije standardna)
Za Javu: JUnit
Python unittest
/*Zanemariti velika/mala slova */