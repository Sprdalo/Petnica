/*Bez znanja linearne algebre, ovaj fajl korisniku znaci kao vremenska prognoza za Kambodzu*/

Grafika se dosta zasniva na linearnoj algebri.

Model:
	3d model: gomila primitiva
	koji su gomila tacaka (vektora) u prostoru sa bojom/teksturom

Rasterizacija je "ekran" <=> pixeli na ekranu sa bojom

Plan rada:
	model transform - model u prostoru
	world transform - prostor pred kamerom
	perspective transform - kamera na ekran
	rasterization - sve to u pixele

GPU ima specijalnu podrsku za vektore:
	sabiranje, oduzimanje
	mnozenje matrica

Vertex - tacka u prostoru:
	(x, y, z, w) koordinate
		w je bool
	vektor se upisuje kao jedna kolona matrice (uglaste zagrade)
		|x|
		|y|
		|z|
		|w|

Model transform:
	fixiramo objekat na polozaj u svetu
	pomeramo koordinatne sisteme (odrazi se na sve objekte)

Linearne transformacije:
	svaka transformacija je linearna: moze se predstaviti kao matrica
	transformacije izvodimo mnozenjem sa odgovarajucom matricom
	Tau(x) = A * x

Skaliranje:
	sirenje, skupljanje, preslikavanje oko neke ose
	mnozenje svake ose nekim skalarom
		(x, y, z) --> (sx * x, sy * y, sz * z)
	glScalef(sx, sy, sz)
		mnozenjem vektora (definisanim sa x y z w) i 4x4 matrice dobijemo vektor
		matrica ce izgledati:
				|sx  00  00  00|
				|00  sy  00  00| ===== A - matrica skaliranja
				|00  00  sz  00|
				|00  00  00  01|
			Sa dve nule zbog lepseg formata :)

		Mnozenjem A i vektora x y z w dobije se:
			|sx * x|
			|sy * y|
			|sz * z|
			|1  * w|
		skaliran vektor

Biblioteka za grafiku je openGL i DirectX i ona radi svu potrebnu matematiku

Translacija:
	pomeranje za odredjen vektor (tx, ty, tz)
		(x, y, z) --> (x + tx, y + ty, z + tz)
	glTranslatef(tx, ty, tz)
		Matrica za mnozenje vektora:
			|1 0 0 tx|
			|0 1 0 ty|
			|0 0 1 tz|
			|0 0 0 1 |
		Konacan proizvod
			|x + tx * w|
			|y + ty * w|
			|z + tz * w|
			|     w    |
		Vektori normale imaju komponentu 0 jer to omogucava da na njih primenimo sve operacije
		osim transliranja jer transliranjem objekta on gubi svojstvo normale

Rotacija:
	Najkomplikovanija od svih pa izvodjenje ostavljamo radoznalom citaocu :)
	rotacija oko vektor (x, y, z) za ugao teta
	specijalni slucajevi - oko koordinatnih osa
	glRotated( theta, x, y, z)
		Rotiranje oko x ose

			novo y = cos(theta) * y - z * sin(theta)
			novo z = sin(theta) * y + z * cos(theta)

			|0   0   0  0|
			|0 cos -sin 0| = Rx(theta)
			|0 sin  cos 0|
			|0  0    0  1|

Sve transformacije zajedno:
	Tau(A) op Tau(B) = Tau(A * B) - npr. translacija lika i objekta koji je uvek isti u odnosu na lika (npr puska uz vojnika(mojprimer))
		vazi iz asocijativnosti mnozenja matrica i vektora
		btw nije komunikativno (nije svejedno da li rotiramo pa pomerimo i obrnuto)
		(A x B) * x = A x (B * x)
	transformacije akumuiramo mnozenjem odgovarajuce matrice
	stack matrica ==> brzo mozemo menjati transformacije


------------------------GOTOVO POZICIONIRANJE STVARI U SVETU------------------------------------
------------------------WORLD TRANSFORM---------------------------------------------------------
	treba pozicionirati nas svet red kameru
	kamera uvek stoji u (0, 0, 0) i gleda kao - z
	gluLookAt(ex, ey, ez, lx, ly, ly, ux, uy, uz)
	uvek je prva transformacija koju radimo- da bi bila posldnja primenjena
------------------------PERSPECTIVE TRANSFORM---------------------------------------------------
	od [-afz, afz] x [-fz, fz] x [-zn, -zf]
	do [-a, a] x [-1, 1] x [-1, 1] ali pazeci na perspektivu
		a je odnos x/y ose (ako je ekran 16:9 onda a = 9/16)
	Ovo poglavlje je zapravo obrada perspektive
		Previse blizu tela se "brisu", a dalja tela su manja i ne vide se ako su iza blizih
	Rad:
		delimo x i y sa z
		homogenous divide (op): hdiv(x, y, z, w) = (x / w, y / w, z/ w, 1)
			Nije linearna transformacija ali nam to ne pravi problem
		stavimo w = -z

------------------------RASTERIZACIJA-----------------------------------------------------------
	od trougla na 2D ekranu treba doci do pojedinacnih pixela
	Problemi:
		koje tacke zahvata svaki trougao
		sta je ispred/iza
		sta he koje boje/teksture
	Crtanje trougla:
		Metoda 1: edge walking
			losa paralelizacija, komplikovano
		Metoda 2: brute force
			moze se paralelizovati
			dosta optimizacija
				precompute jednacina prave
				nalazenje manjeg pravougonika pa u njemu raditi bfs (aka brute force :) )
					bounding box
	Depth - Buffer
		poseban sloj za cuvanje daljine
		tacka se crta samo ako je z[t](x, y) > z[buf](x,y)
		ne zavisi linearno nakon porjekcije
		1/z zavisi linearno!
		mozemo iskoristiti homogenizaciju od ranije

	Boja/Tekstura
		linearna interpolacija izmedju temena
		nije idealno
		boja ne zavisi linearno, ali reciprocna vrednost zavisi
			zbog vaznosti boje, radi se bez reciprocne vrednosti :)
		sva racunanja za pixele mozemo odjdnom uraditi
			posao graficke i ovo je onda mnogo brze

	Shaderi
		uopstenje citavog procesa:
			vertex shader 3D do 2D
				od modela do projekcija
			fragment shader: 2D do pixel(fragment)
				od projekcije do pixela
			
			Po default opengl radi prethodnih 150 linija teksta
			ali moze se napisati dodatni program

			Primer shadera: osvetljenje
				skoro pa NP Hard problem
				razni skoro tacni modeli:
					Phongov model
					Nacin da se dosta odrede boje ~dobro: Ba + Bd * cos + Bs * cos^n
						Ova racunica ide za svaki pixel ==> ide na GPU pa je ultrabrzo
							Ba - ambijentalno
							Bd - difuzno
							Bs - spekularno